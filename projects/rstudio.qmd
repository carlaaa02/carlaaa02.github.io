---
title: "Rstudio Art"
---

<br>

**This post is about a mix of artistic curiosity and technical experimentation. I plan to continue developing this section with more animated or interactive visuals.**

<br>

```{r}
#| message: false
library(ggplot2)
library(purrr)
library(dplyr)
library(tibble)
library(artpack)

```

### Heart

I adapted this idea from [The Tidy Trekker](https://thetidytrekker.com/), who originally used a square in their art piece. I modified the figure by replacing the square with a parametric heart shape, using its mathematical equation.

I also customized the colors to fit my own style, going for a clean white outline on a black background and filling the rotated heart in red for contrast.

```{r}
heart <- tibble(
  t = seq(0, 2 * pi, length.out = 100),
  x = 16 * sin(t)^3,
  y = 13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)
) 

rotated_heart <- rotator(
  data = heart,
  x = x,
  y = y,
  angle = 180,
  anchor = "bottom"
)

ggplot() +
  geom_path(
    data = heart,
    aes(x, y),
    color = "white"
  ) +
  geom_polygon(
    data = rotated_heart,
    aes(x, y),
    fill = "red"
  ) +
  coord_equal() +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "black", color = NA),  
    panel.background = element_rect(fill = "black", color = NA)
  )
  
```

### Wave Based Patterns

This figure was inspired by this blog [ *The Tidy Trekker*](https://thetidytrekker.com/post/making-waves/making-waves), which explores using simple trigonometric functions to generate wave interference patterns. I adapted the idea by layering sine and cosine waves with customized color gradients and point sizes to create a grid of motion.

```{r}

grid <- expand.grid(x = 1:20, y = 1:20)

grid <- grid %>%
  mutate(
    value = sin(x / 2) + cos(y / 3), 
    size = abs(value),
    color = value
  )

ggplot(grid, aes(x = x, y = y)) +
  geom_point(aes(size = size, color = color), shape = 21, stroke = 0.3) +
  scale_color_gradientn(colors = c("#ff6b6b", "#feca57", "#48dbfb", "#1dd1a1")) +
  scale_size(range = c(2, 6)) +
  theme_void() +
  theme(
    legend.position = "none",
    panel.background = element_rect(fill = "black", color = NA),
    plot.background = element_rect(fill = "black", color = NA)
  ) 
```

### Color Flare

This plot was inspired by the look of colorful fireworks. I created it using polar coordinates in `ggplot2` which I learned more about from [this guide](https://ggplot2.tidyverse.org/reference/coord_polar.html), where lines radiate out from the center in different directions. Each line has a random length to give it a more natural, uneven feel. I also added a gradient of bright colors to make it look like a explosion.

```{r}
# Generate radial data
n_lines <- 300
angles <- seq(0, 2 * pi, length.out = n_lines)

burst <- data.frame(
  x = cos(angles),
  y = sin(angles),
  xend = cos(angles) * runif(n_lines, 0.5, 1),
  yend = sin(angles) * runif(n_lines, 0.5, 1),
  color = angles
)

# Plot
ggplot(burst) +
  geom_segment(aes(x = 0, y = 0, xend = xend, yend = yend, color = color),
               linewidth = 1.2, alpha = 0.8) +
  scale_color_gradientn(colors = c("#f6d365", "#fda085", "#fbc2eb", "#a18cd1", "#84fab0")) +
  coord_equal() +
  theme_void() +
  theme(
    legend.position = "none",
    panel.background = element_rect(fill = "black", color = NA),
    plot.background = element_rect(fill = "black", color = NA)
  ) 
```
